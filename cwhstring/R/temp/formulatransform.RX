formulaTransform <- function(form, as.expression = FALSE) {
  if (!inherits(form, "formula"))
    stop("'form' must be a 'formula' object!")
  
  # Transform the formula into a string (is it a better way?)
  Res <- deparse(form)   # B.Ripley
  print(Res)
#    Res <- paste(as.character(form)[c(2, 1, 3)], collapse = " ")

  if (as.expression) { # Transform the formula in a nice expression
    # Change '~' into '=='
    Res <- sub("~", "%~~%", Res) # How to do '~' in an expression?
  }
  # Eliminate I( )
  Res <- gsub("(?U)I\\((.*)\\) ", "\\1 ", Res)
#  print(Res)
  # Transform powers
  Res <- gsub("(?U)(.*)\\((.*)\\)\\^([[:digit:]]+)", "\\1^\\3 \\2", Res)
  print(Res)
  # Eliminate brackets
  Res <- gsub("[(]([A-Za-z0-9._]*)[)]", " \\1", Res)
  print(Res)
  if (as.expression) { # Transform the formula in a nice expression
    Res <- eval(parse(text = Res))
  }
  Res <- gsub("log", "ln", Res)
  return(Res)
}

  # Eliminate I( )
  Res <- gsub("(?U)I\\((.*)\\) ", "\\1 ", Res)
  print(Res)

(f <- log(D) ~ log(N)+I(log(N)^2)+log(t+u) + sin(t) + I(v-(x+u)^3))
(f1 <- paste(deparse(f),collapse=""))
(f2 <- gsub("I\\((.*)\\) ", "\\1 ", f1))  #### ????
[1] "log(D) ~ log(N) + log(N)^2 + log(t)"
(f3 <- gsub("log\\((.*)\\)", "ln \\1", f2, perl=TRUE)) #greedy
[1] "ln D) ~ log(N) + log(N)^2 + log(t"
(f3 <- gsub("(?U)log\\((.*)\\)", "ln \\1", f2, perl=TRUE)) #ungreedy
[1] "ln D ~ ln N + ln N^2 + ln t"
(f4 <- gsub("ln ([[:alpha:]])\\^([[:digit:]])", "ln^\\2 \\1", f3))
0[1] "ln D ~ ln N + ln^2 N + ln t"

(aa  <- gsub("(?U)I\\((.*)\\((.*)\\)(.*)\\)", "\\1\\(\\2\\)\\3 ", "log(D) ~ log(N) + I(log(N)^2) + log(t+u) + sin(t) + I(v-(x+u)^3)", perl=TRUE))

(f3 <- gsub("(?U)log\\((.*)\\)", "ln \\1", f2, perl=TRUE)) #greedy
(bb <- gsub("(?U)([[:alpha:]]+)\\(([[:alpha:]]*)\\)\\^([[:digit:]]+)", "_\\1#\\3@\\2&", f2, perl=TRUE)) #ungreedy

(bb <- gsub("(?U)(\w*)\\((^[\]*)\\)\\^([[:digit:]]+)","_\\1_^\\3_[\\2]_",aa, perl=TRUE))
(bb <- gsub("(?U)([[:alpha:]]*)\\((.*)\\)\\^([[:digit:]]*)","\\1\\^\\3\\(\\2\\)",aa))

log(D) ~ log(N)+I(log(N)^2)+log(t) + sin(t) + x5

Form <- ln(D) ~ ln(N) + ln2(N) + ln(t)
# Same as your original formula

# Here is a nicer presentation as a string
formulaTransform(Form)

# Here is an even nicer presentation (creating an expression)
plot(1:3, type = "n")
text(2, 2, formulaTransform(Form, TRUE))

# The later form is really interesting when you use, for instance,
# greek letters for variables, or so...
Form2 <- ln(alpha) ~ ln(beta) + ln2(beta) + ln3(beta)

formulaTransform(Form2)
plot(1:3, type = "n")
text(2, 2, formulaTransform(Form2, TRUE))

# ... but this could be refined even more!

Best,

Philippe Grosjean
